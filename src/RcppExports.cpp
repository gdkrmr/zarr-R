// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "zarr_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// readAttributesGroup
Rcpp::List readAttributesGroup(const Rcpp::XPtr <z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_readAttributesGroup(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr <z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(readAttributesGroup(g));
    return rcpp_result_gen;
END_RCPP
}
// readAttributesDataset
Rcpp::List readAttributesDataset(const Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_readAttributesDataset(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(readAttributesDataset(d));
    return rcpp_result_gen;
END_RCPP
}
// writeAttributesFile
void writeAttributesFile(const Rcpp::XPtr<z5::filesystem::handle::File> f, const Rcpp::List& l);
RcppExport SEXP _zarr_writeAttributesFile(SEXP fSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    writeAttributesFile(f, l);
    return R_NilValue;
END_RCPP
}
// writeAttributesGroup
void writeAttributesGroup(const Rcpp::XPtr<z5::filesystem::handle::Group> g, const Rcpp::List& l);
RcppExport SEXP _zarr_writeAttributesGroup(SEXP gSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    writeAttributesGroup(g, l);
    return R_NilValue;
END_RCPP
}
// writeAttributesDataset
void writeAttributesDataset(const Rcpp::XPtr<z5::filesystem::handle::Dataset> ds, const Rcpp::List& l);
RcppExport SEXP _zarr_writeAttributesDataset(SEXP dsSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    writeAttributesDataset(ds, l);
    return R_NilValue;
END_RCPP
}
// createFile
void createFile(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_createFile(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    createFile(f);
    return R_NilValue;
END_RCPP
}
// createGroup
void createGroup(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_createGroup(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    createGroup(g);
    return R_NilValue;
END_RCPP
}
// createDataset
void createDataset(Rcpp::XPtr<z5::filesystem::handle::Dataset> d, Rcpp::XPtr<z5::DatasetMetadata> m);
RcppExport SEXP _zarr_createDataset(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::DatasetMetadata> >::type m(mSEXP);
    createDataset(d, m);
    return R_NilValue;
END_RCPP
}
// getFileHandle
Rcpp::XPtr<z5::filesystem::handle::File> getFileHandle(const std::string& path, const std::string& mode);
RcppExport SEXP _zarr_getFileHandle(SEXP pathSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(getFileHandle(path, mode));
    return rcpp_result_gen;
END_RCPP
}
// FileIsS3
bool FileIsS3(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileIsS3(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileIsS3(f));
    return rcpp_result_gen;
END_RCPP
}
// FileIsGcs
bool FileIsGcs(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileIsGcs(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileIsGcs(f));
    return rcpp_result_gen;
END_RCPP
}
// FileExists
bool FileExists(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileExists(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileExists(f));
    return rcpp_result_gen;
END_RCPP
}
// FileIsZarr
bool FileIsZarr(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileIsZarr(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileIsZarr(f));
    return rcpp_result_gen;
END_RCPP
}
// FilePath
std::string FilePath(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FilePath(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FilePath(f));
    return rcpp_result_gen;
END_RCPP
}
// FileDelete
void FileDelete(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileDelete(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    FileDelete(f);
    return R_NilValue;
END_RCPP
}
// FileKeys
Rcpp::CharacterVector FileKeys(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileKeys(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileKeys(f));
    return rcpp_result_gen;
END_RCPP
}
// FileIn
bool FileIn(Rcpp::XPtr<z5::filesystem::handle::File> f, const std::string& key);
RcppExport SEXP _zarr_FileIn(SEXP fSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(FileIn(f, key));
    return rcpp_result_gen;
END_RCPP
}
// getGroupHandleFile
Rcpp::XPtr<z5::filesystem::handle::Group> getGroupHandleFile(Rcpp::XPtr<z5::filesystem::handle::File> f, std::string& key);
RcppExport SEXP _zarr_getGroupHandleFile(SEXP fSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(getGroupHandleFile(f, key));
    return rcpp_result_gen;
END_RCPP
}
// getGroupHandleGroup
Rcpp::XPtr<z5::filesystem::handle::Group> getGroupHandleGroup(Rcpp::XPtr<z5::filesystem::handle::Group> g1, std::string& key);
RcppExport SEXP _zarr_getGroupHandleGroup(SEXP g1SEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(getGroupHandleGroup(g1, key));
    return rcpp_result_gen;
END_RCPP
}
// getDatasetHandleFile
Rcpp::XPtr<z5::filesystem::handle::Dataset> getDatasetHandleFile(Rcpp::XPtr<z5::filesystem::handle::File> f, std::string& key);
RcppExport SEXP _zarr_getDatasetHandleFile(SEXP fSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(getDatasetHandleFile(f, key));
    return rcpp_result_gen;
END_RCPP
}
// getDatasetHandleGroup
Rcpp::XPtr<z5::filesystem::handle::Dataset> getDatasetHandleGroup(Rcpp::XPtr<z5::filesystem::handle::Group> g, std::string& key);
RcppExport SEXP _zarr_getDatasetHandleGroup(SEXP gSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    Rcpp::traits::input_parameter< std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(getDatasetHandleGroup(g, key));
    return rcpp_result_gen;
END_RCPP
}
// ListToMetadata
Rcpp::XPtr<z5::DatasetMetadata> ListToMetadata(const Rcpp::List& l);
RcppExport SEXP _zarr_ListToMetadata(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(ListToMetadata(l));
    return rcpp_result_gen;
END_RCPP
}
// MetadataToList
Rcpp::List MetadataToList(Rcpp::XPtr<z5::DatasetMetadata> mptr);
RcppExport SEXP _zarr_MetadataToList(SEXP mptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::DatasetMetadata> >::type mptr(mptrSEXP);
    rcpp_result_gen = Rcpp::wrap(MetadataToList(mptr));
    return rcpp_result_gen;
END_RCPP
}
// createDatasetMetadata
Rcpp::XPtr<z5::DatasetMetadata> createDatasetMetadata(const std::string& dtype, const Rcpp::IntegerVector& shape, const Rcpp::IntegerVector& chunkShape, const bool createAsZarr, const std::string& compressor, const Rcpp::List& compressionOptions, const double fillValue);
RcppExport SEXP _zarr_createDatasetMetadata(SEXP dtypeSEXP, SEXP shapeSEXP, SEXP chunkShapeSEXP, SEXP createAsZarrSEXP, SEXP compressorSEXP, SEXP compressionOptionsSEXP, SEXP fillValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type chunkShape(chunkShapeSEXP);
    Rcpp::traits::input_parameter< const bool >::type createAsZarr(createAsZarrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type compressor(compressorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type compressionOptions(compressionOptionsSEXP);
    Rcpp::traits::input_parameter< const double >::type fillValue(fillValueSEXP);
    rcpp_result_gen = Rcpp::wrap(createDatasetMetadata(dtype, shape, chunkShape, createAsZarr, compressor, compressionOptions, fillValue));
    return rcpp_result_gen;
END_RCPP
}
// readSubarray
SEXP readSubarray(const Rcpp::XPtr<z5::Dataset> ds, const Rcpp::IntegerVector& offset, const Rcpp::IntegerVector& shape);
RcppExport SEXP _zarr_readSubarray(SEXP dsSEXP, SEXP offsetSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::Dataset> >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(readSubarray(ds, offset, shape));
    return rcpp_result_gen;
END_RCPP
}
// writeSubarray
void writeSubarray(const Rcpp::XPtr<z5::Dataset>& ds, const SEXP data, const Rcpp::IntegerVector& offset);
RcppExport SEXP _zarr_writeSubarray(SEXP dsSEXP, SEXP dataSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::Dataset>& >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type offset(offsetSEXP);
    writeSubarray(ds, data, offset);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_zarr_readAttributesGroup", (DL_FUNC) &_zarr_readAttributesGroup, 1},
    {"_zarr_readAttributesDataset", (DL_FUNC) &_zarr_readAttributesDataset, 1},
    {"_zarr_writeAttributesFile", (DL_FUNC) &_zarr_writeAttributesFile, 2},
    {"_zarr_writeAttributesGroup", (DL_FUNC) &_zarr_writeAttributesGroup, 2},
    {"_zarr_writeAttributesDataset", (DL_FUNC) &_zarr_writeAttributesDataset, 2},
    {"_zarr_createFile", (DL_FUNC) &_zarr_createFile, 1},
    {"_zarr_createGroup", (DL_FUNC) &_zarr_createGroup, 1},
    {"_zarr_createDataset", (DL_FUNC) &_zarr_createDataset, 2},
    {"_zarr_getFileHandle", (DL_FUNC) &_zarr_getFileHandle, 2},
    {"_zarr_FileIsS3", (DL_FUNC) &_zarr_FileIsS3, 1},
    {"_zarr_FileIsGcs", (DL_FUNC) &_zarr_FileIsGcs, 1},
    {"_zarr_FileExists", (DL_FUNC) &_zarr_FileExists, 1},
    {"_zarr_FileIsZarr", (DL_FUNC) &_zarr_FileIsZarr, 1},
    {"_zarr_FilePath", (DL_FUNC) &_zarr_FilePath, 1},
    {"_zarr_FileDelete", (DL_FUNC) &_zarr_FileDelete, 1},
    {"_zarr_FileKeys", (DL_FUNC) &_zarr_FileKeys, 1},
    {"_zarr_FileIn", (DL_FUNC) &_zarr_FileIn, 2},
    {"_zarr_getGroupHandleFile", (DL_FUNC) &_zarr_getGroupHandleFile, 2},
    {"_zarr_getGroupHandleGroup", (DL_FUNC) &_zarr_getGroupHandleGroup, 2},
    {"_zarr_getDatasetHandleFile", (DL_FUNC) &_zarr_getDatasetHandleFile, 2},
    {"_zarr_getDatasetHandleGroup", (DL_FUNC) &_zarr_getDatasetHandleGroup, 2},
    {"_zarr_ListToMetadata", (DL_FUNC) &_zarr_ListToMetadata, 1},
    {"_zarr_MetadataToList", (DL_FUNC) &_zarr_MetadataToList, 1},
    {"_zarr_createDatasetMetadata", (DL_FUNC) &_zarr_createDatasetMetadata, 7},
    {"_zarr_readSubarray", (DL_FUNC) &_zarr_readSubarray, 3},
    {"_zarr_writeSubarray", (DL_FUNC) &_zarr_writeSubarray, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_zarr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
