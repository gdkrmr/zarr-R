// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "zarr_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// readAttributesGroup
Rcpp::List readAttributesGroup(const Rcpp::XPtr <z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_readAttributesGroup(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr <z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(readAttributesGroup(g));
    return rcpp_result_gen;
END_RCPP
}
// readAttributesDataset
Rcpp::List readAttributesDataset(const Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_readAttributesDataset(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(readAttributesDataset(d));
    return rcpp_result_gen;
END_RCPP
}
// writeAttributesFile
void writeAttributesFile(const Rcpp::XPtr<z5::filesystem::handle::File> f, const Rcpp::List& l);
RcppExport SEXP _zarr_writeAttributesFile(SEXP fSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    writeAttributesFile(f, l);
    return R_NilValue;
END_RCPP
}
// writeAttributesGroup
void writeAttributesGroup(const Rcpp::XPtr<z5::filesystem::handle::Group> g, const Rcpp::List& l);
RcppExport SEXP _zarr_writeAttributesGroup(SEXP gSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    writeAttributesGroup(g, l);
    return R_NilValue;
END_RCPP
}
// writeAttributesDataset
void writeAttributesDataset(const Rcpp::XPtr<z5::filesystem::handle::Dataset> ds, const Rcpp::List& l);
RcppExport SEXP _zarr_writeAttributesDataset(SEXP dsSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    writeAttributesDataset(ds, l);
    return R_NilValue;
END_RCPP
}
// openDatasetFile
Rcpp::XPtr<z5::Dataset> openDatasetFile(const Rcpp::XPtr<z5::filesystem::handle::File> f, const std::string& key);
RcppExport SEXP _zarr_openDatasetFile(SEXP fSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(openDatasetFile(f, key));
    return rcpp_result_gen;
END_RCPP
}
// openDatasetGroup
Rcpp::XPtr<z5::Dataset> openDatasetGroup(const Rcpp::XPtr<z5::filesystem::handle::Group> g, const std::string& key);
RcppExport SEXP _zarr_openDatasetGroup(SEXP gSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(openDatasetGroup(g, key));
    return rcpp_result_gen;
END_RCPP
}
// createDatasetFile
Rcpp::XPtr<z5::Dataset> createDatasetFile(const Rcpp::XPtr<z5::filesystem::handle::File> f, const std::string& key, const std::string& dtype, const Rcpp::IntegerVector& shape, const Rcpp::IntegerVector& chunkShape, const std::string& compressor, const Rcpp::List& compressionOptions, const double fillValue);
RcppExport SEXP _zarr_createDatasetFile(SEXP fSEXP, SEXP keySEXP, SEXP dtypeSEXP, SEXP shapeSEXP, SEXP chunkShapeSEXP, SEXP compressorSEXP, SEXP compressionOptionsSEXP, SEXP fillValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type key(keySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type chunkShape(chunkShapeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type compressor(compressorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type compressionOptions(compressionOptionsSEXP);
    Rcpp::traits::input_parameter< const double >::type fillValue(fillValueSEXP);
    rcpp_result_gen = Rcpp::wrap(createDatasetFile(f, key, dtype, shape, chunkShape, compressor, compressionOptions, fillValue));
    return rcpp_result_gen;
END_RCPP
}
// createDatasetGroup
Rcpp::XPtr<z5::Dataset> createDatasetGroup(const Rcpp::XPtr<z5::filesystem::handle::Group> g, const std::string& key, const std::string& dtype, const Rcpp::IntegerVector& shape, const Rcpp::IntegerVector& chunkShape, const std::string& compressor, const Rcpp::List& compressionOptions, const double fillValue);
RcppExport SEXP _zarr_createDatasetGroup(SEXP gSEXP, SEXP keySEXP, SEXP dtypeSEXP, SEXP shapeSEXP, SEXP chunkShapeSEXP, SEXP compressorSEXP, SEXP compressionOptionsSEXP, SEXP fillValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type key(keySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type chunkShape(chunkShapeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type compressor(compressorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type compressionOptions(compressionOptionsSEXP);
    Rcpp::traits::input_parameter< const double >::type fillValue(fillValueSEXP);
    rcpp_result_gen = Rcpp::wrap(createDatasetGroup(g, key, dtype, shape, chunkShape, compressor, compressionOptions, fillValue));
    return rcpp_result_gen;
END_RCPP
}
// DatasetIsZarr
bool DatasetIsZarr(Rcpp::XPtr<z5::Dataset> d);
RcppExport SEXP _zarr_DatasetIsZarr(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DatasetIsZarr(d));
    return rcpp_result_gen;
END_RCPP
}
// DatasetGetDtype
std::string DatasetGetDtype(Rcpp::XPtr<z5::Dataset> d);
RcppExport SEXP _zarr_DatasetGetDtype(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DatasetGetDtype(d));
    return rcpp_result_gen;
END_RCPP
}
// getFileHandle
Rcpp::XPtr<z5::filesystem::handle::File> getFileHandle(const std::string& path, const std::string& mode);
RcppExport SEXP _zarr_getFileHandle(SEXP pathSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(getFileHandle(path, mode));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleIsS3
bool FileHandleIsS3(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleIsS3(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandleIsS3(f));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleIsGcs
bool FileHandleIsGcs(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleIsGcs(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandleIsGcs(f));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleExists
bool FileHandleExists(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleExists(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandleExists(f));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleIsZarr
bool FileHandleIsZarr(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleIsZarr(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandleIsZarr(f));
    return rcpp_result_gen;
END_RCPP
}
// FileHandlePath
std::string FileHandlePath(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandlePath(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandlePath(f));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleDelete
void FileHandleDelete(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleDelete(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    FileHandleDelete(f);
    return R_NilValue;
END_RCPP
}
// FileHandleKeys
Rcpp::CharacterVector FileHandleKeys(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleKeys(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandleKeys(f));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleIn
bool FileHandleIn(Rcpp::XPtr<z5::filesystem::handle::File> f, const std::string& key);
RcppExport SEXP _zarr_FileHandleIn(SEXP fSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandleIn(f, key));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleNameInBucket
std::string FileHandleNameInBucket(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleNameInBucket(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandleNameInBucket(f));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleBucket
std::string FileHandleBucket(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleBucket(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(FileHandleBucket(f));
    return rcpp_result_gen;
END_RCPP
}
// FileHandleCreate
void FileHandleCreate(Rcpp::XPtr<z5::filesystem::handle::File> f);
RcppExport SEXP _zarr_FileHandleCreate(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    FileHandleCreate(f);
    return R_NilValue;
END_RCPP
}
// getGroupHandleFileHandle
Rcpp::XPtr<z5::filesystem::handle::Group> getGroupHandleFileHandle(Rcpp::XPtr<z5::filesystem::handle::File> f, std::string& key);
RcppExport SEXP _zarr_getGroupHandleFileHandle(SEXP fSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(getGroupHandleFileHandle(f, key));
    return rcpp_result_gen;
END_RCPP
}
// getGroupHandleGroupHandle
Rcpp::XPtr<z5::filesystem::handle::Group> getGroupHandleGroupHandle(Rcpp::XPtr<z5::filesystem::handle::Group> g1, std::string& key);
RcppExport SEXP _zarr_getGroupHandleGroupHandle(SEXP g1SEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(getGroupHandleGroupHandle(g1, key));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleIsS3
bool GroupHandleIsS3(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleIsS3(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandleIsS3(g));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleIsGcs
bool GroupHandleIsGcs(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleIsGcs(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandleIsGcs(g));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleExists
bool GroupHandleExists(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleExists(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandleExists(g));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleIsZarr
bool GroupHandleIsZarr(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleIsZarr(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandleIsZarr(g));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandlePath
std::string GroupHandlePath(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandlePath(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandlePath(g));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleDelete
void GroupHandleDelete(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleDelete(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    GroupHandleDelete(g);
    return R_NilValue;
END_RCPP
}
// GroupHandleKeys
Rcpp::CharacterVector GroupHandleKeys(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleKeys(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandleKeys(g));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleIn
bool GroupHandleIn(Rcpp::XPtr<z5::filesystem::handle::Group> g, const std::string& key);
RcppExport SEXP _zarr_GroupHandleIn(SEXP gSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandleIn(g, key));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleNameInBucket
std::string GroupHandleNameInBucket(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleNameInBucket(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandleNameInBucket(g));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleBucket
std::string GroupHandleBucket(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleBucket(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupHandleBucket(g));
    return rcpp_result_gen;
END_RCPP
}
// GroupHandleCreate
void GroupHandleCreate(Rcpp::XPtr<z5::filesystem::handle::Group> g);
RcppExport SEXP _zarr_GroupHandleCreate(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    GroupHandleCreate(g);
    return R_NilValue;
END_RCPP
}
// getDatasetHandleFileHandle
Rcpp::XPtr<z5::filesystem::handle::Dataset> getDatasetHandleFileHandle(Rcpp::XPtr<z5::filesystem::handle::File> f, std::string& key);
RcppExport SEXP _zarr_getDatasetHandleFileHandle(SEXP fSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::File> >::type f(fSEXP);
    Rcpp::traits::input_parameter< std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(getDatasetHandleFileHandle(f, key));
    return rcpp_result_gen;
END_RCPP
}
// getDatasetHandleGroupHandle
Rcpp::XPtr<z5::filesystem::handle::Dataset> getDatasetHandleGroupHandle(Rcpp::XPtr<z5::filesystem::handle::Group> g, std::string& key);
RcppExport SEXP _zarr_getDatasetHandleGroupHandle(SEXP gSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Group> >::type g(gSEXP);
    Rcpp::traits::input_parameter< std::string& >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(getDatasetHandleGroupHandle(g, key));
    return rcpp_result_gen;
END_RCPP
}
// DatasetHandleIsS3
bool DatasetHandleIsS3(Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_DatasetHandleIsS3(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DatasetHandleIsS3(d));
    return rcpp_result_gen;
END_RCPP
}
// DatasetHandleIsGcs
bool DatasetHandleIsGcs(Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_DatasetHandleIsGcs(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DatasetHandleIsGcs(d));
    return rcpp_result_gen;
END_RCPP
}
// DatasetHandleExists
bool DatasetHandleExists(Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_DatasetHandleExists(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DatasetHandleExists(d));
    return rcpp_result_gen;
END_RCPP
}
// DatasetHandleIsZarr
bool DatasetHandleIsZarr(Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_DatasetHandleIsZarr(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DatasetHandleIsZarr(d));
    return rcpp_result_gen;
END_RCPP
}
// DatasetHandlePath
std::string DatasetHandlePath(Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_DatasetHandlePath(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(DatasetHandlePath(d));
    return rcpp_result_gen;
END_RCPP
}
// DatasetHandleDelete
void DatasetHandleDelete(Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_DatasetHandleDelete(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    DatasetHandleDelete(d);
    return R_NilValue;
END_RCPP
}
// DatasetHandleCreate
void DatasetHandleCreate(Rcpp::XPtr<z5::filesystem::handle::Dataset> d);
RcppExport SEXP _zarr_DatasetHandleCreate(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::filesystem::handle::Dataset> >::type d(dSEXP);
    DatasetHandleCreate(d);
    return R_NilValue;
END_RCPP
}
// ListToMetadata
Rcpp::XPtr<z5::DatasetMetadata> ListToMetadata(const Rcpp::List& l);
RcppExport SEXP _zarr_ListToMetadata(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(ListToMetadata(l));
    return rcpp_result_gen;
END_RCPP
}
// MetadataToList
Rcpp::List MetadataToList(Rcpp::XPtr<z5::DatasetMetadata> mptr);
RcppExport SEXP _zarr_MetadataToList(SEXP mptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<z5::DatasetMetadata> >::type mptr(mptrSEXP);
    rcpp_result_gen = Rcpp::wrap(MetadataToList(mptr));
    return rcpp_result_gen;
END_RCPP
}
// createDatasetMetadata
Rcpp::XPtr<z5::DatasetMetadata> createDatasetMetadata(const std::string& dtype, const Rcpp::IntegerVector& shape, const Rcpp::IntegerVector& chunkShape, const bool createAsZarr, const std::string& compressor, const Rcpp::List& compressionOptions, const double fillValue);
RcppExport SEXP _zarr_createDatasetMetadata(SEXP dtypeSEXP, SEXP shapeSEXP, SEXP chunkShapeSEXP, SEXP createAsZarrSEXP, SEXP compressorSEXP, SEXP compressionOptionsSEXP, SEXP fillValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type chunkShape(chunkShapeSEXP);
    Rcpp::traits::input_parameter< const bool >::type createAsZarr(createAsZarrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type compressor(compressorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type compressionOptions(compressionOptionsSEXP);
    Rcpp::traits::input_parameter< const double >::type fillValue(fillValueSEXP);
    rcpp_result_gen = Rcpp::wrap(createDatasetMetadata(dtype, shape, chunkShape, createAsZarr, compressor, compressionOptions, fillValue));
    return rcpp_result_gen;
END_RCPP
}
// readSubarray
SEXP readSubarray(const Rcpp::XPtr<z5::Dataset> ds, const Rcpp::IntegerVector& offset, const Rcpp::IntegerVector& shape);
RcppExport SEXP _zarr_readSubarray(SEXP dsSEXP, SEXP offsetSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::Dataset> >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(readSubarray(ds, offset, shape));
    return rcpp_result_gen;
END_RCPP
}
// writeSubarray
void writeSubarray(const Rcpp::XPtr<z5::Dataset>& ds, const SEXP data, const Rcpp::IntegerVector& offset);
RcppExport SEXP _zarr_writeSubarray(SEXP dsSEXP, SEXP dataSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::Dataset>& >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type offset(offsetSEXP);
    writeSubarray(ds, data, offset);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_zarr_readAttributesGroup", (DL_FUNC) &_zarr_readAttributesGroup, 1},
    {"_zarr_readAttributesDataset", (DL_FUNC) &_zarr_readAttributesDataset, 1},
    {"_zarr_writeAttributesFile", (DL_FUNC) &_zarr_writeAttributesFile, 2},
    {"_zarr_writeAttributesGroup", (DL_FUNC) &_zarr_writeAttributesGroup, 2},
    {"_zarr_writeAttributesDataset", (DL_FUNC) &_zarr_writeAttributesDataset, 2},
    {"_zarr_openDatasetFile", (DL_FUNC) &_zarr_openDatasetFile, 2},
    {"_zarr_openDatasetGroup", (DL_FUNC) &_zarr_openDatasetGroup, 2},
    {"_zarr_createDatasetFile", (DL_FUNC) &_zarr_createDatasetFile, 8},
    {"_zarr_createDatasetGroup", (DL_FUNC) &_zarr_createDatasetGroup, 8},
    {"_zarr_DatasetIsZarr", (DL_FUNC) &_zarr_DatasetIsZarr, 1},
    {"_zarr_DatasetGetDtype", (DL_FUNC) &_zarr_DatasetGetDtype, 1},
    {"_zarr_getFileHandle", (DL_FUNC) &_zarr_getFileHandle, 2},
    {"_zarr_FileHandleIsS3", (DL_FUNC) &_zarr_FileHandleIsS3, 1},
    {"_zarr_FileHandleIsGcs", (DL_FUNC) &_zarr_FileHandleIsGcs, 1},
    {"_zarr_FileHandleExists", (DL_FUNC) &_zarr_FileHandleExists, 1},
    {"_zarr_FileHandleIsZarr", (DL_FUNC) &_zarr_FileHandleIsZarr, 1},
    {"_zarr_FileHandlePath", (DL_FUNC) &_zarr_FileHandlePath, 1},
    {"_zarr_FileHandleDelete", (DL_FUNC) &_zarr_FileHandleDelete, 1},
    {"_zarr_FileHandleKeys", (DL_FUNC) &_zarr_FileHandleKeys, 1},
    {"_zarr_FileHandleIn", (DL_FUNC) &_zarr_FileHandleIn, 2},
    {"_zarr_FileHandleNameInBucket", (DL_FUNC) &_zarr_FileHandleNameInBucket, 1},
    {"_zarr_FileHandleBucket", (DL_FUNC) &_zarr_FileHandleBucket, 1},
    {"_zarr_FileHandleCreate", (DL_FUNC) &_zarr_FileHandleCreate, 1},
    {"_zarr_getGroupHandleFileHandle", (DL_FUNC) &_zarr_getGroupHandleFileHandle, 2},
    {"_zarr_getGroupHandleGroupHandle", (DL_FUNC) &_zarr_getGroupHandleGroupHandle, 2},
    {"_zarr_GroupHandleIsS3", (DL_FUNC) &_zarr_GroupHandleIsS3, 1},
    {"_zarr_GroupHandleIsGcs", (DL_FUNC) &_zarr_GroupHandleIsGcs, 1},
    {"_zarr_GroupHandleExists", (DL_FUNC) &_zarr_GroupHandleExists, 1},
    {"_zarr_GroupHandleIsZarr", (DL_FUNC) &_zarr_GroupHandleIsZarr, 1},
    {"_zarr_GroupHandlePath", (DL_FUNC) &_zarr_GroupHandlePath, 1},
    {"_zarr_GroupHandleDelete", (DL_FUNC) &_zarr_GroupHandleDelete, 1},
    {"_zarr_GroupHandleKeys", (DL_FUNC) &_zarr_GroupHandleKeys, 1},
    {"_zarr_GroupHandleIn", (DL_FUNC) &_zarr_GroupHandleIn, 2},
    {"_zarr_GroupHandleNameInBucket", (DL_FUNC) &_zarr_GroupHandleNameInBucket, 1},
    {"_zarr_GroupHandleBucket", (DL_FUNC) &_zarr_GroupHandleBucket, 1},
    {"_zarr_GroupHandleCreate", (DL_FUNC) &_zarr_GroupHandleCreate, 1},
    {"_zarr_getDatasetHandleFileHandle", (DL_FUNC) &_zarr_getDatasetHandleFileHandle, 2},
    {"_zarr_getDatasetHandleGroupHandle", (DL_FUNC) &_zarr_getDatasetHandleGroupHandle, 2},
    {"_zarr_DatasetHandleIsS3", (DL_FUNC) &_zarr_DatasetHandleIsS3, 1},
    {"_zarr_DatasetHandleIsGcs", (DL_FUNC) &_zarr_DatasetHandleIsGcs, 1},
    {"_zarr_DatasetHandleExists", (DL_FUNC) &_zarr_DatasetHandleExists, 1},
    {"_zarr_DatasetHandleIsZarr", (DL_FUNC) &_zarr_DatasetHandleIsZarr, 1},
    {"_zarr_DatasetHandlePath", (DL_FUNC) &_zarr_DatasetHandlePath, 1},
    {"_zarr_DatasetHandleDelete", (DL_FUNC) &_zarr_DatasetHandleDelete, 1},
    {"_zarr_DatasetHandleCreate", (DL_FUNC) &_zarr_DatasetHandleCreate, 1},
    {"_zarr_ListToMetadata", (DL_FUNC) &_zarr_ListToMetadata, 1},
    {"_zarr_MetadataToList", (DL_FUNC) &_zarr_MetadataToList, 1},
    {"_zarr_createDatasetMetadata", (DL_FUNC) &_zarr_createDatasetMetadata, 7},
    {"_zarr_readSubarray", (DL_FUNC) &_zarr_readSubarray, 3},
    {"_zarr_writeSubarray", (DL_FUNC) &_zarr_writeSubarray, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_zarr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
