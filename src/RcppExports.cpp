// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "zarr_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// readAttributesSubset
Rcpp::List readAttributesSubset(const std::string& path, const std::vector<std::string>& keys);
RcppExport SEXP _zarr_readAttributesSubset(SEXP pathSEXP, SEXP keysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type keys(keysSEXP);
    rcpp_result_gen = Rcpp::wrap(readAttributesSubset(path, keys));
    return rcpp_result_gen;
END_RCPP
}
// readAttributes
Rcpp::List readAttributes(const std::string& path);
RcppExport SEXP _zarr_readAttributes(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(readAttributes(path));
    return rcpp_result_gen;
END_RCPP
}
// writeAttributes
void writeAttributes(const std::string& path, const Rcpp::List& l);
RcppExport SEXP _zarr_writeAttributes(SEXP pathSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type l(lSEXP);
    writeAttributes(path, l);
    return R_NilValue;
END_RCPP
}
// getPath
std::string getPath(const Rcpp::XPtr<z5::Dataset> ds);
RcppExport SEXP _zarr_getPath(SEXP dsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::Dataset> >::type ds(dsSEXP);
    rcpp_result_gen = Rcpp::wrap(getPath(ds));
    return rcpp_result_gen;
END_RCPP
}
// openDataset
Rcpp::XPtr<z5::Dataset> openDataset(const std::string& path, const std::string& file_mode);
RcppExport SEXP _zarr_openDataset(SEXP pathSEXP, SEXP file_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type file_mode(file_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(openDataset(path, file_mode));
    return rcpp_result_gen;
END_RCPP
}
// createDataset
Rcpp::XPtr<z5::Dataset> createDataset(const std::string& path, const std::string& dtype, const Rcpp::IntegerVector& shape, const Rcpp::IntegerVector& chunkShape, const bool createAsZarr, const std::string& compressor, const Rcpp::List& compressionOptions, const double fillValue, const std::string file_mode);
RcppExport SEXP _zarr_createDataset(SEXP pathSEXP, SEXP dtypeSEXP, SEXP shapeSEXP, SEXP chunkShapeSEXP, SEXP createAsZarrSEXP, SEXP compressorSEXP, SEXP compressionOptionsSEXP, SEXP fillValueSEXP, SEXP file_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type chunkShape(chunkShapeSEXP);
    Rcpp::traits::input_parameter< const bool >::type createAsZarr(createAsZarrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type compressor(compressorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type compressionOptions(compressionOptionsSEXP);
    Rcpp::traits::input_parameter< const double >::type fillValue(fillValueSEXP);
    Rcpp::traits::input_parameter< const std::string >::type file_mode(file_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(createDataset(path, dtype, shape, chunkShape, createAsZarr, compressor, compressionOptions, fillValue, file_mode));
    return rcpp_result_gen;
END_RCPP
}
// readSubarray
xt::rarray<double> readSubarray(const Rcpp::XPtr<z5::Dataset> ds, const Rcpp::IntegerVector& offset, const Rcpp::IntegerVector& shape);
RcppExport SEXP _zarr_readSubarray(SEXP dsSEXP, SEXP offsetSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::Dataset> >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(readSubarray(ds, offset, shape));
    return rcpp_result_gen;
END_RCPP
}
// writeSubarray
void writeSubarray(const Rcpp::XPtr<z5::Dataset> ds, const xt::rarray<double> data, const Rcpp::IntegerVector& offset);
RcppExport SEXP _zarr_writeSubarray(SEXP dsSEXP, SEXP dataSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<z5::Dataset> >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< const xt::rarray<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type offset(offsetSEXP);
    writeSubarray(ds, data, offset);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_zarr_readAttributesSubset", (DL_FUNC) &_zarr_readAttributesSubset, 2},
    {"_zarr_readAttributes", (DL_FUNC) &_zarr_readAttributes, 1},
    {"_zarr_writeAttributes", (DL_FUNC) &_zarr_writeAttributes, 2},
    {"_zarr_getPath", (DL_FUNC) &_zarr_getPath, 1},
    {"_zarr_openDataset", (DL_FUNC) &_zarr_openDataset, 2},
    {"_zarr_createDataset", (DL_FUNC) &_zarr_createDataset, 9},
    {"_zarr_readSubarray", (DL_FUNC) &_zarr_readSubarray, 3},
    {"_zarr_writeSubarray", (DL_FUNC) &_zarr_writeSubarray, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_zarr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
